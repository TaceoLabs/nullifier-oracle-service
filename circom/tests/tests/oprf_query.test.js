const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Oprf Query (d=10)", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/oprf_query_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });


  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness({pk: [
      [12926335063978273448089741990924527827340544719094547009383816569581332416077n, 13601884821482902342518099314271713773927626584774316227795436923954815979717n],
      [6681948453048013983255761627911788702505354936155269991568256883390179313446n, 8723877505776865515024839262502211300150918870199013908689938091264762530899n],
      [4130007963492660720637731765122568744397613189655952612359789740420106850890n, 20576662661693193716980555685045190114465397988207026522543028144080728038701n],
      [16049022726938350651462726244308661870950145886856667551495358149087906955647n, 16790788826337242979000323587284644516797827205710011602165602634371161788026n],
      [18977877457984476308864773727686557034061540491316611390796218039839204364287n, 8023625091474450895124313425836076622860177782752541763597153889045050983743n],
      [12625385051978946536629895838151681552201645810297121526022779738168478382877n, 18301464868228955677140539568661836545903526156212733248499785338988104713506n],
      [13173950132487232231950918948945812203548934191443305167132280990773158533312n, 8228518347124648804075537267984202065850659807640576904006954075643367017406n]
    ],
    pk_index: 0n,
    s: 2364413558049615625319842141782619041889285871538502856649701262922425213004n,
    r: [6175612728637629485087191228020330116606602022719282638712380102842504854908n, 17437243393862770527889891370658737731377038475147560198044797003868574678179n],
    merkle_root: 21082125378253925282211139170012155419098085198685231176800262735917360369551n,
    mt_index: 619n,
    siblings: [
      585667135721753969363509939300211011246556245223812717046690099385593273174n,
      13831276848914456433029944485688452931943276765267741191127219913539274952909n,
      15123163260382119529154699958310842429671386656986509951998058885724184625211n,
      3698702788246529553998844916267818368435299657182417440867583687256534559455n,
      15009307841198748046734354117872496801061930613634362932433916018409464931320n,
      17755219582132495894705533450858798905341479365658436522558995884914908206475n,
      4510870697710898789031470398971957650637843318989665041899201573351849687225n,
      13728601500714660164204724228361781808217876930452909341427924627120091660145n,
      367163834445130469708330074562703722303807574404567970933209548626671695554n,
      10749291063558121804414082224321566190292085012775435926940002682854965857323n
    ],
    beta: 2713156278226218925849420915623507429489930023971122022413762364463509944006n,
    rp_id: 14543781253279221655341348046093482030359842858497268799758461103786468968520n,
    action: 11645641403676661130561889787211885818940845317622158566969546584908643962625n,
    nonce: 2236132571319938347910518696643047589185681298608183023074417259533825907089n}, true);
 await circuit.assertOut(witness, {
    q: [10851163341866761321629250499717618467688590307935082224242724314921643294608n, 9086616255143779761523730171626495774703178856402820226594283427942485444828n]
    });
    await circuit.checkConstraints(witness);
  });
});
