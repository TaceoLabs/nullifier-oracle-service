const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Oprf Query (d=10)", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/oprf_query_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });


  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness({pk: [12926335063978273448089741990924527827340544719094547009383816569581332416077n, 13601884821482902342518099314271713773927626584774316227795436923954815979717n],
    s: 946156597185224798625227414386429757279115747432707972307958098464946045243n,
    r: [21561604489375439305242200544911677044098492674406238755491271981380184733940n, 5075287832405450193696137447979478944619632217274769163837508212029830763331n],
    merkle_root: 2697483548244784321544879549473854204019958976851518587166295439154135086417n,
    index: 619n,
    siblings: [
      585667135721753969363509939300211011246556245223812717046690099385593273174n,
      13831276848914456433029944485688452931943276765267741191127219913539274952909n,
      15123163260382119529154699958310842429671386656986509951998058885724184625211n,
      3698702788246529553998844916267818368435299657182417440867583687256534559455n,
      15009307841198748046734354117872496801061930613634362932433916018409464931320n,
      17755219582132495894705533450858798905341479365658436522558995884914908206475n,
      4510870697710898789031470398971957650637843318989665041899201573351849687225n,
      13728601500714660164204724228361781808217876930452909341427924627120091660145n,
      367163834445130469708330074562703722303807574404567970933209548626671695554n,
      10749291063558121804414082224321566190292085012775435926940002682854965857323n
    ],
    beta: 2386341368829896381557079742552019690319382526453962999659086860009494586392n,
    rp_id: 14543781253279221655341348046093482030359842858497268799758461103786468968520n,
    action: 11645641403676661130561889787211885818940845317622158566969546584908643962625n}, true);
 await circuit.assertOut(witness, {
    q: [8493352259781988928398600023573172626747462377477825599808889226981582156662n, 18257530488945171913732363592264239957101034769092758213125148416576417817462n]
    });
    await circuit.checkConstraints(witness);
  });
});
