const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Oprf Query (d=10)", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/oprf_query_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });


  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness({nonce: 18871704932868136054793192224838481843477328152662874950971209340503970202849n,
    pk: [18583516951849911137589213560287888058904264954447406129266479391375859118187n, 11275976660222343476638781203652591255100967707193496820837437013048598741240n],
    s: 844202213024551061974819699373799994721267546216648061212774584691768882914n,
    r: [18482969738044558719601870399371551871028331462143105156168403962888626002309n, 11041362094118129535951752107055687983663495968693090556995817607447416589661n],
    merkle_root: 10616566177709204113441441413440430542834072917433331872784739364327836665322n,
    index: 653n,
    siblings: [
      2276692615654762296369062350791857143858540739447513461287617473804955103126n,
      13721691983499918028351090247414996537303665840643865831659579087433220869394n,
      10504527072856625374251918935304995810363256944839645422147112326469942932346n,
      9922136640310746679589505888952316195107449577468486901753282935448033947801n,
      7072354584330803739893341075959600662170009672799717087821974214692377537543n,
      17885221558895888060441738558710283599239203102366021944096727770820448633434n,
      4176855770021968762089114227379105743389356785527273444730337538746178730938n,
      16310982107959235351382361510657637894710848030823462990603022631860057699843n,
      3605361703005876910845017810180860777095882632272347991398864562553165819321n,
      19777773459105034061589927242511302473997443043058374558550458005274075309994n
    ],
    beta: 1229480072495577306800228020644366805423157777295430051907138677321452514450n}, true);
 await circuit.assertOut(witness, {
     q: [3361355416507432587001463563518097986132233930004197534129518586384452713864n, 20809189209105382633051228602747759813166925789775204022512505555497489416700n]
    });
    await circuit.checkConstraints(witness);
  });
});
