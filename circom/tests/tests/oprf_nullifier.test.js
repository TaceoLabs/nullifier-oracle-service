const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Oprf Nullifier (d=10)", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/oprf_nullifier_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });


  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness({nonce: 17527808355733572064349635926616651114188973141407021505303671395429133585762n,
    user_pk: [21401133815753272158581373608400195689782610381945251033589325038087496888280n, 19091996088573333559663810867276119416825303249657214897622516663776199009683n],
    query_s: 2568024387448669163640391715843181161600008534362096648284756435644828707263n,
    query_r: [840540906220249166567119766138479205306152832549915678056950035628426396888n, 2779260792933846335560145183351404086200566714768618372932072810633369880637n],
    merkle_root: 19807757393389545998911768298648053631167916659976100308751601190710373225638n,
    index: 138n,
    siblings: [
      9922136640310746679589505888952316195107449577468486901753282935448033947801n,
      7072354584330803739893341075959600662170009672799717087821974214692377537543n,
      17885221558895888060441738558710283599239203102366021944096727770820448633434n,
      4176855770021968762089114227379105743389356785527273444730337538746178730938n,
      16310982107959235351382361510657637894710848030823462990603022631860057699843n,
      3605361703005876910845017810180860777095882632272347991398864562553165819321n,
      19777773459105034061589927242511302473997443043058374558550458005274075309994n,
      7293248160986222168965084119404459569735731899027826201489495443245472176528n,
      4950945325831326745155992396913255083324808803561643578786617403587808899194n,
      9839041341834787608930465148119275825945818559056168815074113488941919676716n
    ],
    beta: 2631889002001759311314107919314082289932715317379755904940007714371773022289n,
    dlog_e: 3416671077262709259671994966337595072420920984589835771918296570207437743503n,
    dlog_s: 1466693299790873994752508650070973838967759609220679528036613321411478466843n,
    oprf_pk: [18583516951849911137589213560287888058904264954447406129266479391375859118187n, 11275976660222343476638781203652591255100967707193496820837437013048598741240n],
    oprf_response_blinded: [18865948411468658317853530463692465088283340320865130848709968212835937347866n, 14571065605711717786286315788574491708890121210600570798800818227163262197463n],
    oprf_response: [16626631279816069279201461427161615841035622713726671830942212220996165369042n, 3680052987645304355540011367069702571389937544126524063816164965629399161713n],
    nullified_action: 18871704932868136054793192224838481843477328152662874950971209340503970202849n,
    nullified_epoch: 13070024181106480808917647717561899005190393964650966844215679533571883111501n}, true);
 await circuit.assertOut(witness, {
     nullifier: 8455897040729354145213832187119196267759574845046035528086360585494468215233n
    });
    await circuit.checkConstraints(witness);
  });
});
