const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Oprf Nullifier (d=10)", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/oprf_nullifier_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });


  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness({user_pk: [11424111402163641412653601566328702068397731832579074042253283634150339925264n, 3397809300980885235804174362241369832217431802705669910552686192577329588910n],
    query_s: 1795886063001456770502206517682628636395994944032090387381186751041201796625n,
    query_r: [6536903853589643195933559733678841957733183325158515103444844335497294251162n, 2875888803621596801893132785038524643328195548890514973374225215970436839813n],
    merkle_root: 19455942497878005407112108609547209917090883625833984364123832432134275931482n,
    index: 334n,
    siblings: [
      9922136640310746679589505888952316195107449577468486901753282935448033947801n,
      7072354584330803739893341075959600662170009672799717087821974214692377537543n,
      17885221558895888060441738558710283599239203102366021944096727770820448633434n,
      4176855770021968762089114227379105743389356785527273444730337538746178730938n,
      16310982107959235351382361510657637894710848030823462990603022631860057699843n,
      3605361703005876910845017810180860777095882632272347991398864562553165819321n,
      19777773459105034061589927242511302473997443043058374558550458005274075309994n,
      7293248160986222168965084119404459569735731899027826201489495443245472176528n,
      4950945325831326745155992396913255083324808803561643578786617403587808899194n,
      9839041341834787608930465148119275825945818559056168815074113488941919676716n
    ],
    beta: 2631889002001759311314107919314082289932715317379755904940007714371773022289n,
    rp_id: 13721691983499918028351090247414996537303665840643865831659579087433220869394n,
    action: 10504527072856625374251918935304995810363256944839645422147112326469942932346n,
    dlog_e: 6615020333573747084592690139581140803664325670512096503838402864256049080586n,
    dlog_s: 1658839262384471315666781207660979508039476797358924492739503015617541888498n,
    oprf_pk: [18583516951849911137589213560287888058904264954447406129266479391375859118187n, 11275976660222343476638781203652591255100967707193496820837437013048598741240n],
    oprf_response_blinded: [17540811824442597074169886794860252102810712405550419863489518573965466201545n, 3569801156660280506235741074783338531341698695900573817371327254471835973322n],
    oprf_response: [5385546650390668447811833465001780794270235116208160887833354355336834988422n, 13624352007483153607853679953709129973456647592662735912869862404821838120705n],
    signal_hash: 18871704932868136054793192224838481843477328152662874950971209340503970202849n}, true);
 await circuit.assertOut(witness, {
    nullifier: 19087338553570743426853186522901487094032454303953579796610773252526065772006n
    });
    await circuit.checkConstraints(witness);
  });
});
