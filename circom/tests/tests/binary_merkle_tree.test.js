const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Binary Merkle Tree", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/binary_merkle_root_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });

  // Merkle tree where value at index i is i, depth is 10
  it("kat0: full depth", async () => {
    const witness = await circuit.calculateWitness({ leaf: 173, depth: 10, index: 173, siblings: [172, 18253431818238833560089926744411628541586407128894035463745555921068136102106n, 16868484719618213618047826688130744180260288775024967866335086862984820579193n, 15445424669604784158172439661499387894781587904834034748872151055618515127574n, 11985102209584992485537074670399260647125631014783976456480518785058098088091n, 7529331827698182082026553246902641611003764618765018377070340634626763941297n, 20311804249764043412941126031922553598556256747900909357228171948029601506103n, 106599967634654808326327469607491729920796846224703891331239822451055507887n, 6673240894865743354327373457469287228619133808080051040844360346731580107445n, 6686233614272520436006097674898100126935288063802860302146903976471995923626n] }, true);
    await circuit.assertOut(witness, {
      out: 17962222579867010390682817360472871355427814654450781800458672628226749392897n,
    });
    await circuit.checkConstraints(witness);
  });

  // Merkle tree where value at index i is i, depth is 10
  // 173 without the leading bit is 45
  it("kat1: Not full depth", async () => {
    const witness = await circuit.calculateWitness({ leaf: 173, depth: 7, index: 45, siblings: [172, 18253431818238833560089926744411628541586407128894035463745555921068136102106n, 16868484719618213618047826688130744180260288775024967866335086862984820579193n, 15445424669604784158172439661499387894781587904834034748872151055618515127574n, 11985102209584992485537074670399260647125631014783976456480518785058098088091n, 7529331827698182082026553246902641611003764618765018377070340634626763941297n, 20311804249764043412941126031922553598556256747900909357228171948029601506103n, 106599967634654808326327469607491729920796846224703891331239822451055507887n, 6673240894865743354327373457469287228619133808080051040844360346731580107445n, 6686233614272520436006097674898100126935288063802860302146903976471995923626n] }, true);
    await circuit.assertOut(witness, {
      out: 4735270755488914621976460429366441628081428967827245536046011302237510055224n,
    });
    await circuit.checkConstraints(witness);
  });

  // Merkle tree where value at index i is i, depth is 10
  it("kat2: Not full depth index out of range", async () => {
    var did_fail = false;
    try {
        await circuit.calculateWitness({ leaf: 173, depth: 7, index: 173, siblings: [172, 18253431818238833560089926744411628541586407128894035463745555921068136102106n, 16868484719618213618047826688130744180260288775024967866335086862984820579193n, 15445424669604784158172439661499387894781587904834034748872151055618515127574n, 11985102209584992485537074670399260647125631014783976456480518785058098088091n, 7529331827698182082026553246902641611003764618765018377070340634626763941297n, 20311804249764043412941126031922553598556256747900909357228171948029601506103n, 106599967634654808326327469607491729920796846224703891331239822451055507887n, 6673240894865743354327373457469287228619133808080051040844360346731580107445n, 6686233614272520436006097674898100126935288063802860302146903976471995923626n] }, true);
   } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });
});
