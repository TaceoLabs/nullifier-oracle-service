const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("EdDSA Poseidon2", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/eddsaposeidon2_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });


  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness({enabled: 1, Ax: 16678259879098414123498807254435611303785911063700858304367872369684614918416n, Ay: 7888819232908132535915269475302946450083176441390977566673707888303107893510n, S: 1679189954938304510189578517565885199314564862973699743590709552043840739831n, R8x: 9324174297151491549264811692384430723560494801467612063988128019217786550764n, R8y: 15483619585430622646805622121878925743133950545354786707241324402663412566491n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    await circuit.checkConstraints(witness);
  });

  it("kat1 success", async () => {
    const witness = await circuit.calculateWitness({enabled: 1, Ax: 13079981064638982842758913962021678791087261669338426936308733615476581190193n, Ay: 4044843440250216994353718925956056775588999425785088260170280764792530294584n, S: 1396843496818816525379404834131007016425223269956142454744756703609196158469n, R8x: 588134465530934978666427973239142245382289393743689190280425274365795192752n, R8y: 16625363298993859520171788935753886147881712916952282306052362259359211237738n, M: 2915128568691568051790179173058040565240368703618887264694651479943038317157n }, true);
    await circuit.checkConstraints(witness);
  });

  it("check bitflip", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness({enabled: 1, Ax: 16678259879098414123498807254435611303785911063700858304367872369684614918406n, Ay: 7888819232908132535915269475302946450083176441390977566673707888303107893510n, S: 1679189954938304510189578517565885199314564862973699743590709552043840739831n, R8x: 9324174297151491549264811692384430723560494801467612063988128019217786550764n, R8y: 15483619585430622646805622121878925743133950545354786707241324402663412566491n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });

  // Checks s + p
  it("check wrong s", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness({enabled: 1, Ax: 16678259879098414123498807254435611303785911063700858304367872369684614918416n, Ay: 7888819232908132535915269475302946450083176441390977566673707888303107893510n, S: 4415220313918213912970379235723044585391378835132267002790925212992288112872n, R8x: 9324174297151491549264811692384430723560494801467612063988128019217786550764n, R8y: 15483619585430622646805622121878925743133950545354786707241324402663412566491n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });
});
