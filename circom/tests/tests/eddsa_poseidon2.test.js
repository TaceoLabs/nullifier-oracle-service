const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("EdDSA Poseidon2", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/eddsaposeidon2_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });


  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness({enabled: 1, Ax: 16678259879098414123498807254435611303785911063700858304367872369684614918416n, Ay: 7888819232908132535915269475302946450083176441390977566673707888303107893510n, S: 779431754587633494462958255317375995011198923313261619713358872124357450417n, R8x: 19325581497550104608665224312227342954531582947014276816166951211669674344339n, R8y: 21214624780884475199269519818926793933987889310012793492012260536363969364505n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    await circuit.checkConstraints(witness);
  });

  it("kat1 success", async () => {
    const witness = await circuit.calculateWitness({enabled: 1, Ax: 13079981064638982842758913962021678791087261669338426936308733615476581190193n, Ay: 4044843440250216994353718925956056775588999425785088260170280764792530294584n, S: 18975071825061825005184197052437516499401490119069146826936271668524889304n, R8x: 20517097341039930020939967673673876177398535751849012994702384239922336033183n, R8y: 5334990612241124626935580099131892633557618644969706728046725810563828866181n, M: 2915128568691568051790179173058040565240368703618887264694651479943038317157n }, true);
    await circuit.checkConstraints(witness);
  });

  it("check bitflip", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness({enabled: 1, Ax: 16678259879098414123498807254435611303785911063700858304367872369684614918406n, Ay: 7888819232908132535915269475302946450083176441390977566673707888303107893510n, S: 779431754587633494462958255317375995011198923313261619713358872124357450417n, R8x: 19325581497550104608665224312227342954531582947014276816166951211669674344339n, R8y: 21214624780884475199269519818926793933987889310012793492012260536363969364505n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });

  // Checks s + p
  it("check wrong s", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness({enabled: 1, Ax: 16678259879098414123498807254435611303785911063700858304367872369684614918416n, Ay: 7888819232908132535915269475302946450083176441390977566673707888303107893510n, S: 3515462113567542897243758973474535381088012895471828878913574533072804823458n, R8x: 19325581497550104608665224312227342954531582947014276816166951211669674344339n, R8y: 21214624780884475199269519818926793933987889310012793492012260536363969364505n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });
});
