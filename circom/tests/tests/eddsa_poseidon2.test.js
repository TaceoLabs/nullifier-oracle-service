const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("EdDSA Poseidon2", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/eddsaposeidon2_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });


  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness({Ax: 15861662102942198476185518224532077347254150735350796263259682790715259346390n, Ay: 17622332940847650587004774926435083207962382856110852169511204932927794212320n, S: 2128104906629434075529508057546284580247227319347477887390422344724817923329n, Rx: 19090079173373584153996824137084726661643725553797485823319088208683554498717n, Ry: 3643574957097202527589616469273298197083911730855228311907034680488748021268n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    await circuit.checkConstraints(witness);
  });

  it("kat1 success", async () => {
    const witness = await circuit.calculateWitness({Ax: 799588856343464002877028562222211497330129187319590508049257685786236700114n, Ay: 14902389233276705483052996479987000276830365610862573825891673167255962507742n, S: 9145191237582650454380099957761658105575586283663674279318986596761559773n, Rx: 234874950623680517572578303006997285290588653466131574034573396955894832795n, Ry: 16541008635573367613475848393577493564676156592887182984237738769555298223333n, M: 2915128568691568051790179173058040565240368703618887264694651479943038317157n }, true);
    await circuit.checkConstraints(witness);
  });

  it("check bitflip", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness({Ax: 15861662102942198476185518224532077347254150735350796263259682790715259346390n, Ay: 17622332940847650587004774926435083207962382856110852169511204932927794212320n, S: 2028104906629434075529508057546284580247227319347477887390422344724817923329n, Rx: 19090079173373584153996824137084726661643725553797485823319088208683554498717n, Ry: 3643574957097202527589616469273298197083911730855228311907034680488748021268n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });

  // Checks s + p
  it("check wrong s", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness({Ax: 15861662102942198476185518224532077347254150735350796263259682790715259346390n, Ay: 17622332940847650587004774926435083207962382856110852169511204932927794212320n, S: 4864135265609343478310308775703443966324041291506045146590638005673265296370n, Rx: 19090079173373584153996824137084726661643725553797485823319088208683554498717n, Ry: 3643574957097202527589616469273298197083911730855228311907034680488748021268n, M: 3126080974277891902445700130528654565374341115115698716199527644337840721369n }, true);
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });
});
