const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Verify DLog", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/verify_dlog_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });

  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness(
      {
        e: 2271204762645772197291098185419461647006504420188749350681646210041886831565n,
        s: 1898272596470450895984646548169803253727905769685089817599474760221641844959n,
        a: [
          10166444082544012578146123505444459634011726462835028755951605062278415152836n,
          19078310613849722679067076238255463937378735358341955678795202751963630919334n,
        ],
        b: [
          188036763312893325926783334341680375793688656591135711606404106083040188296n,
          19780065155698858442505493165629103910020320105244270296127122689325369584373n,
        ],
        c: [
          4208251739788288975321235793879055367343103263162281587840424978441875924628n,
          8299488087457389957245946122649030788343156364777325860589966866928348090321n,
        ],
      },
      true,
    );
    await circuit.checkConstraints(witness);
  });

  it("kat1 success", async () => {
    const witness = await circuit.calculateWitness(
      {
        e: 13470290524623317157190290743627223304740120328995919261163252511201179474564n,
        s: 1989912519842211914383256533160901507144927648628091298993640376409528262105n,
        a: [
          16298001804820706084955608194473026893213255104139292616676466608148652155780n,
          80221724587277231609063947820923421211081413460047319443673969281787169448n,
        ],
        b: [
          9783319252781709426043488039669351119295997343629477634042963607230490782177n,
          18879770677785341464346974905741373814076444774630610096790116457997292702585n,
        ],
        c: [
          20864151369796611242161249740329752884201641479364498590739965563911606206092n,
          7981798647126870589085892824276300783878686937562383009368126689039424953543n,
        ],
      },
      true,
    );
    await circuit.checkConstraints(witness);
  });

  it("check bitflip", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness(
        {
          e: 2270204762645772197291098185419461647006504420188749350681646210041886831565n,
          s: 1898272596470450895984646548169803253727905769685089817599474760221641844959n,
          a: [
            10166444082544012578146123505444459634011726462835028755951605062278415152836n,
            19078310613849722679067076238255463937378735358341955678795202751963630919334n,
          ],
          b: [
            188036763312893325926783334341680375793688656591135711606404106083040188296n,
            19780065155698858442505493165629103910020320105244270296127122689325369584373n,
          ],
          c: [
            4208251739788288975321235793879055367343103263162281587840424978441875924628n,
            8299488087457389957245946122649030788343156364777325860589966866928348090321n,
          ],
        },
        true,
      );
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });

  it("check wrong s", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness(
        {
          e: 2271204762645772197291098185419461647006504420188749350681646210041886831565n,
          s: 4634302955450360298765447266326962639804719741843657076799690421170089218000n,
          a: [
            10166444082544012578146123505444459634011726462835028755951605062278415152836n,
            19078310613849722679067076238255463937378735358341955678795202751963630919334n,
          ],
          b: [
            188036763312893325926783334341680375793688656591135711606404106083040188296n,
            19780065155698858442505493165629103910020320105244270296127122689325369584373n,
          ],
          c: [
            4208251739788288975321235793879055367343103263162281587840424978441875924628n,
            8299488087457389957245946122649030788343156364777325860589966866928348090321n,
          ],
        },
        true,
      );
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });
});
