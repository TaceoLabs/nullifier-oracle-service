const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Verify DLog", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/verify_dlog_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });

  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness(
      {
        e: 4705994806256187620240304702326186729286955785607710544430508685852335494479n,
        s: 1767429624348008262260865880353514810935427785209987745034144685272316421959n,
        a: [
          3583040498388887351029760941810535830673604224692700803719704789436980102331n,
          10662802674536207857024598966040850201210669642975887615839520599548652481948n,
        ],
        b: [
          9737540621768725769357114293008372216904232426489122529328069981283187782532n,
          13650732285924528116087422726662074071954243350919113589338805315713928148325n,
        ],
        c: [
          21574761343861184032524233499591702894436984020341304020321080229086176670407n,
          3313841886106641510587677986983356159380242043183171483389927977881244592638n,
        ],
      },
      true,
    );
    await circuit.checkConstraints(witness);
  });

  it("kat1 success", async () => {
    const witness = await circuit.calculateWitness(
      {
        e: 20865816689921225245526120115814567960700955484257304946841552217037117463189n,
        s: 1508025176735103429357244881679233218419560697135857636305288316384432372874n,
        a: [
          13852210342980036242488216946117211826283486560286321713191426447557617672848n,
          16619927274608990088320429324634738785056223501341385107818435812328029872233n,
        ],
        b: [
          11815925977257892037720315523139995537974726661448698895296473143293248776265n,
          15672883364677039803777980168632673365350941870077356968171203160380631157209n,
        ],
        c: [
          18278048663260200973855255675276196898882350525216070151141140641897268569238n,
          5813169746239956734894173676142183017479392820977892383701532143734147064073n,
        ],
      },
      true,
    );
    await circuit.checkConstraints(witness);
  });

  it("check bitflip", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness(
        {
          e: 20865816789921225245526120115814567960700955484257304946841552217037117463189n,
          s: 1508025176735103429357244881679233218419560697135857636305288316384432372874n,
          a: [
            13852210342980036242488216946117211826283486560286321713191426447557617672848n,
            16619927274608990088320429324634738785056223501341385107818435812328029872233n,
          ],
          b: [
            11815925977257892037720315523139995537974726661448698895296473143293248776265n,
            15672883364677039803777980168632673365350941870077356968171203160380631157209n,
          ],
          c: [
            18278048663260200973855255675276196898882350525216070151141140641897268569238n,
            5813169746239956734894173676142183017479392820977892383701532143734147064073n,
          ],
        },
        true,
      );
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });

  it("check wrong s", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness(
        {
          e: 20865816689921225245526120115814567960700955484257304946841552217037117463189n,
          s: 1767429624348008262260865880353514810935427785209987745034144685272316421959n,
          a: [
            13852210342980036242488216946117211826283486560286321713191426447557617672848n,
            16619927274608990088320429324634738785056223501341385107818435812328029872233n,
          ],
          b: [
            11815925977257892037720315523139995537974726661448698895296473143293248776265n,
            15672883364677039803777980168632673365350941870077356968171203160380631157209n,
          ],
          c: [
            18278048663260200973855255675276196898882350525216070151141140641897268569238n,
            5813169746239956734894173676142183017479392820977892383701532143734147064073n,
          ],
        },
        true,
      );
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });
});
