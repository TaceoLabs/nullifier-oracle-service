const { wasm } = require("circom_tester");
const { expect } = require("chai");
const path = require("path");

describe("Verify DLog", function () {
  this.timeout(10000);

  let circuit;
  before(async () => {
    circuit = await wasm(
      path.join(__dirname, "circuits/verify_dlog_test.circom"),
      { include: [path.join(__dirname, "../../")] },
    );
    await circuit.loadConstraints();
  });

  it("kat0 success", async () => {
    const witness = await circuit.calculateWitness(
      {
        e: 17216890052155078673354736512340085809435954019572046652091477265139327756229n,
        s: 1860444935719654279485355243691367567601476790170180559595163231687301992696n,
        a: [
          13290589473441714448883540783309789818678448287377070568460831298224775054570n,
          7534468900054884007174401124166568006255944307745843395355046739920505708049n,
        ],
        b: [
          13201696312281286898697201137655065807146589313134696227827531545593615268027n,
          31719530249390418583651102018967313667967401714242435572579597952886694043n,
        ],
        c: [
          3314538356308211109731366272625514704807330255162107224358940830150919095203n,
          12144091751595509895248370441187607807639764326166100823641762281771022775586n,
        ],
      },
      true,
    );
    await circuit.checkConstraints(witness);
  });

  it("kat1 success", async () => {
    const witness = await circuit.calculateWitness(
      {
        e: 11235876853209717927650969104870683709007797490539609694282021840613320309187n,
        s: 1400060696746631739774203365117429861876922137742037143048500186452918185732n,
        a: [
          2050202868331450547625538452864523337833403922768661525423446844001906993832n,
          4792144295452996444543109934245475041419564228225884219010330105353419341893n,
        ],
        b: [
          11062055920144643377523766711931660336682969584240539918712960257025962812577n,
          8299069414475119057515078452482325580200443611636869432548744031237100776615n,
        ],
        c: [
          2699455857381575517474705376178574947479377034685435932509660262545093967678n,
          1771380611419007051870994547150073608652518606379999073243605013616296011148n,
        ],
      },
      true,
    );
    await circuit.checkConstraints(witness);
  });

  it("check bitflip", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness(
        {
          e: 17206890052155078673354736512340085809435954019572046652091477265139327756229n,
          s: 1860444935719654279485355243691367567601476790170180559595163231687301992696n,
          a: [
            13290589473441714448883540783309789818678448287377070568460831298224775054570n,
            7534468900054884007174401124166568006255944307745843395355046739920505708049n,
          ],
          b: [
            13201696312281286898697201137655065807146589313134696227827531545593615268027n,
            31719530249390418583651102018967313667967401714242435572579597952886694043n,
          ],
          c: [
            3314538356308211109731366272625514704807330255162107224358940830150919095203n,
            12144091751595509895248370441187607807639764326166100823641762281771022775586n,
          ],
        },
        true,
      );
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });

  it("check wrong s", async () => {
    var did_fail = false;
    try {
      await circuit.calculateWitness(
        {
          e: 17216890052155078673354736512340085809435954019572046652091477265139327756229n,
          s: 4596475294699563682266155961848526953678290762328747818795378892635749365737n,
          a: [
            13290589473441714448883540783309789818678448287377070568460831298224775054570n,
            7534468900054884007174401124166568006255944307745843395355046739920505708049n,
          ],
          b: [
            13201696312281286898697201137655065807146589313134696227827531545593615268027n,
            31719530249390418583651102018967313667967401714242435572579597952886694043n,
          ],
          c: [
            3314538356308211109731366272625514704807330255162107224358940830150919095203n,
            12144091751595509895248370441187607807639764326166100823641762281771022775586n,
          ],
        },
        true,
      );
    } catch (e) {
      did_fail = true;
    }
    expect(did_fail).to.be.true;
  });
});
